#include <bits/stdc++.h>
using namespace std;
typedef long long  ll;
typedef  long double  ld;
#define fo(i,start,n,step) for(int i = start; i < n; i+=step)
#define ends cout << "\n";
#define pb(val) push_back(val);
#include <windows.h>
#include <conio.h>

bool gameOver;
const int width = 20;
const int height = 20;
int x,y, fruitX, fruitY, score;
int tailX[100] , tailY[100];
int nTail = 0;
enum eDirection { STOP =0 , LEFT , RIGHT , UP , DOWN };
eDirection dir;
void Setup() {
    gameOver = false;
    dir = STOP;
    x = width/2 -1;
    y = height/2 -1;
//    srand(time(NULL));
    fruitX = rand() %width -1 ;
    fruitY = rand() % height -1;
    score = 0;
}

void Draw() {
    system("cls");
    fo(i,0,width+1,1) {
        cout << '#';
    }
    ends;

    fo(i,0,height,1) {
        fo(j,0,width,1) {
            if(j == 0 || j == width-1) {
                cout << '#';
            }
            if(i == y && j == x) {
                cout <<'0';
            }
            else if(i == fruitY && j == fruitX) {
                cout << 'F';
            } else {
                bool print = false;
                fo(k,0,nTail,1) {
                    if(tailX[k] == j && tailY[k] == i) {
                        cout << 'o';
                        print = true;
                    }
                }
                if(!print)
                    cout << " ";
            }

        }
        cout << endl;
    }


    fo(i,0,width+1,1) {
        cout << '#';
    }
    ends;
    cout << "SCORE: " << score << endl;

}
void Input() {
    if(_kbhit()) {
        switch (_getch()) {
            case 'a':
                dir = LEFT;
                break;
            case 'd':
                dir = RIGHT;
                break;
            case 'w':
                dir = UP;
                break;

            case 's':
                dir = DOWN;
                break;
            case 'x':
                gameOver = true;
                break;
        }
    }
}

void Logic() {

    int prevX = tailX[0];
    int prevY = tailY[0];
    int prev2X, prev2Y;
    tailX[0] = x;
    tailY[0] = y;
    fo(i,1,nTail,1) {
        prev2X = tailX[i];
        prev2Y = tailY[i];
        tailX[i] = prevX;
        tailY[i] = prevY;
        prevX = prev2X;
        prevY = prev2Y;
    }
    switch (dir) {
        case LEFT :
            x--;
            break;
        case RIGHT :
            x++;
            break;
        case UP :
            y--;
            break;
        case DOWN :
            y++;
            break;
    }
//    if(x >= width-1 || x < 0 || y >= height || y <0) {
//        gameOver = true;
//    }
    if(x >= width-1) {
        x =0;
    } else if( x < 0) {
        x = width - 2;
    }

    if(y >= height) {
        y =0;
    } else if( y < 0) {
        y = height-1;
    }



    fo(i,0,nTail,1) {
        if(tailX[i] == x && tailY[i] == y) {
            gameOver = true;
        }
    }
    if(x == fruitX && y == fruitY) {
        score+=10;
        srand(time(NULL));
        fruitX = rand() %width -1;
        fruitY = rand() % height -1 ;
        nTail++;
    }
}


int main() {
    Setup();
    while(!gameOver) {
        Sleep(100);
        Draw();
        Input();
        Logic();

    }

    return 0;
}
